{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "scrolled": false
      },
      "cell_type": "code",
      "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"../input\"))\nimport zipfile\nz = zipfile.ZipFile('../input/BDRW_train/BDRW_train_1.zip', \"r\")\nfor name in z.namelist():\n    y=z.extract(name)\nx=zipfile.ZipFile('../input/BDRW_train/BDRW_train_2.zip', \"r\")\nfor name in x.namelist():\n    x.extract(name)\n\n# Any results you write to the current directory are saved as output.\n\n\n\n\n",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['BDRW_train']\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": true
      },
      "cell_type": "code",
      "source": "import os\nimport glob\ntrain = [f for f in glob.glob(\"BDRW_train_1/*\")]\ntest=[f for f in glob.glob(\"BDRW_train_2/*\")]\nprint(test[0])\nprint(len(train))\nfrom PIL import Image,ImageOps\nI=Image.open('BDRW_train_1/digit_1000.jpg')\nprint(I.size)\nI2=Image.open('BDRW_train_2/digit_1108.jpg')\nprint(I2.size)",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": "BDRW_train_2/digit_1147.jpg\n984\n(34, 52)\n(13, 22)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "a85055427de167ebc950a0d60647ef4b0266e5a1"
      },
      "cell_type": "code",
      "source": "import random\nlabels_frame= pd.read_excel('BDRW_train_2/labels.xls')\nprint(len(labels_frame))\nn=random.randint(0,200)\nimg_name_int= labels_frame.iloc[n,0]\n#print(type(img_name))\nimg_name=img_name_int+'.jpg'\nlabel= labels_frame.iloc[n,1]\nprint('Image Name : {}'.format(img_name))\nprint('Image Label :{}'.format(label))",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": "1392\nImage Name : digit_68.jpg\nImage Label :9\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "386902edfa786b3c54c036aaa579c8ac6ac47815"
      },
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nfrom skimage import io, transform\ndef show_imlab (image, label):\n    sample={'image':image, 'label': label}\n    plt.imshow(image)\n    print('The image shown below is: {}'.format(label))\n    print('The size of the image:{} '.format(image.shape))\nplt.figure()\nshow_imlab(io.imread(os.path.join('BDRW_train_1/',img_name)),label)\nplt.show()",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": "The image shown below is: 9\nThe size of the image:(14, 12, 3) \n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7fb42324c1d0>",
            "image/png": "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\n4CCXnhG/AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "14799deecc2a47e81315fca744a4e62d4bf0de4d"
      },
      "cell_type": "markdown",
      "source": "# Resizing all the images to make it conformal"
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "f3b30eacc0fe801300c3a0de830f834d4e05aeac"
      },
      "cell_type": "code",
      "source": "height=32\nwidth=32\nfor infile in glob.glob(\"BDRW_train_1/*.jpg\"):\n    file,ext= os.path.splitext(infile)\n    im=Image.open(infile)\n    im_new=ImageOps.fit(im,(width,height),Image.BICUBIC)\n    im_new.save(file + \".jpg\")\nfor infile in glob.glob(\"BDRW_train_2/*.jpg\"):\n    file,ext= os.path.splitext(infile)\n    im=Image.open(infile)\n    im_new=ImageOps.fit(im,(width,height),Image.BICUBIC)\n    im_new.save(file + \".jpg\")",
      "execution_count": 5,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "cdbd4add70ed0e028f6d09f87538a6650ebc633e"
      },
      "cell_type": "code",
      "source": "I=Image.open('BDRW_train_1/digit_1033.jpg')\nprint(I.size)\nt=Image.open('BDRW_train_2/digit_1133.jpg')\nprint(t.size)\nplt.imshow(t)",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(32, 32)\n(32, 32)\n",
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "<matplotlib.image.AxesImage at 0x7fb40e06f8d0>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7fb4233635f8>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP8AAAD8CAYAAAC4nHJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAH1RJREFUeJztnVuMXNeVnv9Vp6q6qq/sG7ubN5Gi\nKFuyLMkGoThQYDgzyUAxBpANZAb2g6EHYzQIxkAMTB4EB4idIA+eILbjh8ABHQujCRxfZmzDwsDI\njCHMQJjEI5vSUBQlSuJFvDTZ7Ca72Wz2tS5n5aGLCdXe/+4Wya6mvP8PENjaq3adVfucVadq/7XW\nMneHECI9ClvtgBBia1DwC5EoCn4hEkXBL0SiKPiFSBQFvxCJouAXIlEU/EIkioJfiEQp3s5kM3sC\nwDcBZAD+u7t/Nfb4gR7zXUNhW+x3hnmTjOd8TiHytmbGbdEfPJJ5sTmFQuRgyLgfOX8BecTmTmzO\nj0VfGADLViLHipwAa4SHjS9WdKli5yVicw8/qUUmWeyWGPPxFq8raiO+A4CT+/bETI7ZhTzm5f/j\nloPfzDIA/xXAPwcwDuBXZva8u7/B5uwaAv7yP4RtTRLgADB3LTxeq/E51U5uK0Ze9Ur4mgXA31Ca\nkRgod1SoLbM+alte4vOWrnNbo94THDfvpXOQd1BToecUtTV9jtrMpoPj5RI/aeUSNaEQuT7yeiRI\nGuGTHXsTKnXwE1qM2GLRVI/4z67jZo0vSO7V4PhT/2WeH2gNt/Ox/zEAJ939tLvXAHwfwJO38XxC\niDZyO8G/E8D5m/5/vDUmhHgfcDvBH/qs9WufpczsaTM7bGaHZ67fxtGEEHeU2wn+cQC7b/r/XQAu\nrn2Qux9y94PufnAg/HVUCLEF3E7w/wrAATPbZ2ZlAJ8B8PydcUsIsdnc8m6/uzfM7AsA/gqrmtWz\n7v56bI4VgdK28CFLkfehRkd4O7QjsjNf7eQ74oUCf9mFFb4bvSpwBMYLfLe8WOIfdzIMUFup1k1t\nlV5uQ4M8p3NlwZt8rYr9S3yed3E/CuXw85WJdAOglPETWsj57nxe5+czZmMUS3Vqy8i1CABe4LJo\nI6L11evhXX1vhnf0AaCZh89ZsbxA5/zaYzf8yADu/jMAP7ud5xBCbA36hZ8QiaLgFyJRFPxCJIqC\nX4hEUfALkSi3tdv/ng/WUcTA/duCtoKFpSEA6FoJZ0UY+Jzuroi0FZlXI8cCACPyVQ4u9ZUzLudl\nhUFqQyNi8xFuw2h4OO/nU5rcf+/k94emzXCbjwfHLZuicwoFLlNlkQzCZo1nLObElmU8aaaQcakP\npYj0GZH6cufP2WyGfWTJOwC/9suds3TOWnTnFyJRFPxCJIqCX4hEUfALkSgKfiESpa27/c3MsdAX\n3vWM1W+r18LGUsZ37ZvdkaQTj+xu1/nOcYkk6bAkCwDISsPcj0Jk1953RGyRminFPeHxJimeCAAN\nvh7Wzct4Fe0Kt5GCdnmT74g384gNkYSaRqTe4UrYVizza8djtRUzrga58R39aFW9QljJyCKvGUbU\nj3KkzNjaw274kUKI3ygU/EIkioJfiERR8AuRKAp+IRJFwS9EorRV6ssLORY7w3JOHkncqJHaecUC\nr/lWi0gyeYPXU2sWuMxTycKJFuVOnryTZ1xiy5zLgPUVnojj9XByFAAU6+GEpmKBH6sQ6TO1UON+\nFCuRunqkY89iziW2pYgM6DlP+rE80tmGJF11xOY4v66aER9zW6Q2ZNxmJJGIdV4DACPnrB7ta/Zu\ndOcXIlEU/EIkioJfiERR8AuRKAp+IRJFwS9EotyW1GdmZwBcB9AE0HD3g9EJmaHRE5ZYmpG2SjXi\nZt14NloesdWasRp+XAKqkLZcA9283l490pJreZ77eHlimdquTk1SW4NksXV18GN1dnA5sjLCbX1D\nndTWUQ1npNWLvO7fUn6V2pp55FJ1Ls+ahX1sFHv5sZpcJm7kkXqBLNMOgBmX4Dwj84z7EWiIDWA1\nEDfKndD5/6m789xOIcRdiT72C5Eotxv8DuCvzexlM3v6TjgkhGgPt/ux/3F3v2hm2wH83MzedPcX\nb35A603haQDYsSdWzkQI0U5u687v7hdb/04B+AmAxwKPOeTuB9394OCwgl+Iu4VbDn4z6zKznht/\nA/gdAMfulGNCiM3ldj72jwD4iZndeJ7/6e7/Kzah6cA8SZjKm/xTQYMU3Cyimx8s51LOwjKX85aW\nIjKgh49nGS/gWVvhEs/UxWvU9toRLom9fYy3jFq6HpbmBnov0TlDA/uo7dHH+RrvzsIFTQFgtEoy\nMTFP5xTLPPMtd74ehYj85lnY/0KBt3PLjWf1WT7HbQV+zaHE/bcsbPPIWjmIjxYp+rmGWw5+dz8N\n4JFbnS+E2Fok9QmRKAp+IRJFwS9Eoij4hUgUBb8QidLWAp4Fy1ApkeKTRd5bLy+Gi0hWirvpnLLx\nfnZZpIhkqcCXpLMSLoJZAJeNvMFlqLlrs9R2/gyXlI4du8if80r4OUeHwsVHAWB0lK9H3xB/beUS\nlwF7toWzGbPOUTqnUee2emQdPZLxZ00izxZ5tmWjwbPzmk2+jp5xHxFroVcM5+LF+vvlHpZ73Xm/\nwLXozi9Eoij4hUgUBb8QiaLgFyJRFPxCJEp723U1Dctz4feb7h6+q1wthXf1u3GAzjHsoLZKT6R+\nW5XvYC/Oh5N0Ooq8fdblaZ5Qs3yN7w5fPB9udwUAZ0/y3X7Uw1vE16+8Q6fMTPLKb9UOrprsHPsw\ntS1eDSc7bSOKCQB0le6htrmrPGGlQFpyAUBvNXwdlMDPWanAt+avL/L75XKDtxQrd/EkqKKHX1up\nxK+PzjJJnLKTdM5adOcXIlEU/EIkioJfiERR8AuRKAp+IRJFwS9EorRV6ssKRWzr3B60lTySHFML\ny0a1Iq+d15lFJCXjMmCpxFtvDfSHj7e4vELn9BR5dkZ3xt97B8k6AcBQN0/6mZ8L1ydcWeT18Rau\n8jZZVy5wHxdmuDSHpfBalXIupZYKvDVYZ+E6tXmk/Zo1wgk8lYyf5wIv8YisymXRpQa/DrIir+Vo\nrF1XJLPHm6zO4Mbv57rzC5EoCn4hEkXBL0SiKPiFSBQFvxCJouAXIlHWlfrM7FkAvwtgyt0fao0N\nAPgBgL0AzgD4fXfnelGLghVQJfJc3uD6Sp2016o5n1MudVJbBp5hZcYz/oqdYTmyq8jbOw108ffX\na5HuTnt28PqEU/fy4104G5abJpeW6ZylhcvUNn+dz2vU+Ck3J/UOI23ZYPycVTMufRYjtQSrHeF5\n3RVeww/gdfDKpN4eABSX+Ho0nMuzBWMSIT9WY4W0bIsV/lt73A085k8BPLFm7BkAL7j7AQAvtP5f\nCPE+Yt3gd/cXAaztJPgkgOdafz8H4FN32C8hxCZzq9/5R9x9AgBa//LPZEKIu5JN3/Azs6fN7LCZ\nHZ6+vPGa4kKIzeVWg3/SzMYAoPXvFHugux9y94PufnBwOPKjaSFEW7nV4H8ewFOtv58C8NM7444Q\nol1sROr7HoBPABgys3EAXwbwVQA/NLPPAzgH4Pc2drgcOcKyhoPLV+VyOGsrX+LZXAs8CQzzV7lx\ncZ4XityxK9yqaWB7uJ0YAGzr40UYtw/yQpEHDvBikLVlXrASzfHg8PwcLyQ6f51n/Jnxr2pZmchN\nAEDkq4UFnvnmxjPfmjUuz/b08izNnkq4BVgJPCO0AS7LZRE5MitwW6PBj1f08GuzSPuvxjLx0SMt\nw9Yed70HuPtniem3N3wUIcRdh37hJ0SiKPiFSBQFvxCJouAXIlEU/EIkSnt79XkTy41wD7oiuGxX\nqoQloOUFLsvNTc9S2+kT3DZ5gWdSPbgQ9vEfDXKpr9rJM876BnnByn37uR+1BpdzLkyEX1vHWf58\n15cjmXtFLjlakUt9noXP2coKzzprGpfDPJKJmef81+Ur9fC5mZ7n8uYyy5gD0EGuRQAoVfl1UDT+\nnMVSF/OEzqk3wtei+8ZDWnd+IRJFwS9Eoij4hUgUBb8QiaLgFyJRFPxCJEpbpb6m1zC7cjFoKxl/\nH/LynuD49EJYNgSAS5e5HPbGCS67nHqby4CFSljK+eDDD9M5vZE6keVungU2tJPLVzOL3P+MqEaN\nEpeN8hKXvZqR24OXuWxnpXDmYakznBkJAF0d3ObO5DCgtsLXcfJyWA4+8dZZOmd+KZwZCQA7d/EF\nue9+LkdWu8eorVgI+9gEPy95M7y+HpHM16I7vxCJouAXIlEU/EIkioJfiERR8AuRKO1N7IFj0cM7\n1SXnO/eVQrjmXiOS+LCc86Sf6bm1PUj+P6fOXaC2kd3hOngXr3DfO/oHqS2Wg1Hp40ku3f185xsd\n4cQTL/N6gYUq37UvdvHd47zIX0Ddw/M6i9vonO7KCLU1wesWnrnC1Y/Xjk0Ex//+F2/ROdOzJ6nt\nAw9yZaHUtZ/adu7i56yvJ9y3rQh+Xjoq4dZxBYvUd1z72A0/UgjxG4WCX4hEUfALkSgKfiESRcEv\nRKIo+IVIlI2063oWwO8CmHL3h1pjXwHwBwAutx72JXf/2bpHM4ApEQXjUlSlEJaNuvp5IkjPAK+d\nl1WuUdv8Mm8nNTcflhynZ3ky0PYVXtfNSJ07ACiVIjUNq9yWkWSbrMLf5zu6eQPVYiXS1oqfMswt\nhtt8ZVU+qbeLy1S8AiEwFen+/MabYanvzbfC4wAwfukEta00wrIcAOzdz2XMjq5haiuVwrLdNiLn\nAUBndziJqJDd2cSePwXwRGD8G+7+aOu/9QNfCHFXsW7wu/uLAPivYoQQ70tu5zv/F8zsqJk9a2b8\ns60Q4q7kVoP/WwD2A3gUwASAr7EHmtnTZnbYzA7PXrnFowkh7ji3FPzuPunuTXfPAXwbwGORxx5y\n94PufnAb71EhhGgztxT8ZnZzTaJPAzh2Z9wRQrSLjUh93wPwCQBDZjYO4MsAPmFmjwJwAGcA/OFG\nDzZMNJtS1qDzOj0sv1WNSyE9vfdS28kKl7a2O/9u0pgIZwounLtK59SGuTQ0MMyXv1riklh/xuXI\nbRbOdOxqhGVKACgZlxzL87upbdD2UVt1MVy8cKCff/zriuh5k5d427DCdDjbEgBWzp0Jji9Hztni\nOZ5Nd36eXzvHOrnMNlDjGX/DH74nOJ4PcSl7oCd8rAyRjM81rBv87v7ZwPB3NnwEIcRdiX7hJ0Si\nKPiFSBQFvxCJouAXIlEU/EIkSlsLeGZm6KmEM7fyPPILoDxcNLHcwdsjxSSl0VFe3HNwkBfcZJw5\nc47a7tnPs7kGh0Yjz8olpY4Sf209XTuC45UynzM/y2XAcolnRxYzvv6dHeHXVjQuX01PURNOn5yk\ntomLXOprNMPnuljk97080qNscoJncL75Os8U3L493KYOAAYGwtmAPT1ctrOe8PVhkaKfa9GdX4hE\nUfALkSgKfiESRcEvRKIo+IVIFAW/EInSVqkPKMEQlqLqSzxDb2UpnOHWS4pVAkBfJ++pNjTMCy32\n9PKClbOkUOebx3nBxwc+dD+17dwdzuYCgApXxJA5lw/7eg4Ex3s7uRw2sXSG2ubneHbh5QleOHNk\nMPwCOiK3m/ELi9T2i78/Tm0Tl85Q24UL48HxZqSXY6x46vwcz4A8e4r7/3o/zxYdHZkLjo+N8d6F\nnV1hP/JIUdW16M4vRKIo+IVIFAW/EImi4BciURT8QiRKW3f7PS+ithQu8b+8wHdYl66F6/sVe/ju\naneF13yrRorFdfXw3dzxi5eD4wvjPDHm8hRPBFkIb/Ku+sHFCjjfZEd/T7iu3lA/Tzo5VeCOTF/m\nu+LHXuXJKoXmnuD46AivaXjy9DS1vfxLrqhcuvwGtc0vhs9ZMeNJM9uHw4oUAGzr4qpUucjbV1yZ\n4K3ITr8dvlYP3B9RJMrh+3Yj1kNtDbrzC5EoCn4hEkXBL0SiKPiFSBQFvxCJouAXIlE20q5rN4A/\nAzAKIAdwyN2/aWYDAH4AYC9WW3b9vrvzHkgAgALMwxpWVuCuND0seeTgEhuyGWrq3MYllJGdPFno\n7Hi4FdbkJH/ZU1O8MN3VmSVq6+/nmT0dXBXFyPawxLZ7F5flTg6cp7aZqzwh5cgrb/J5k2End4zx\nFl8Tk6eo7eQJ7uPcUjh5BwCseC04fs+eD9A5u0ceoLasydtuXZ/ldRevXOGJVe+cCMvBly5yubqn\nLwuON5tcql7LRu78DQB/7O4PAPgYgD8yswcBPAPgBXc/AOCF1v8LId4nrBv87j7h7q+0/r4O4DiA\nnQCeBPBc62HPAfjUZjkphLjzvKfv/Ga2F8BHALwEYMTdJ4DVNwgA2++0c0KIzWPDwW9m3QB+BOCL\n7h75YeqvzXvazA6b2eHpK5HfpQoh2sqGgt/MSlgN/O+6+49bw5NmNtayjwEI7my5+yF3P+juBweH\n+IaIEKK9rBv8ZmYAvgPguLt//SbT8wCeav39FICf3nn3hBCbxUay+h4H8DkAr5nZkdbYlwB8FcAP\nzezzAM4B+L31n8oBC8tsJZ70BGRhKSTPeKZannH5p7ufH2zXfv7p5NS58HvlhUgLp4sTZ6nt7Lkz\n1DY0zOWmPl6CEGM7whLQgQfCEiAATE7zWoJvHOVZYhPjfP2nJsLnefswb7s1v8jlsNlr4ew8ACh2\ncum2l5zrhx8J1zoEgA/ee5DaGot8rc6cWKG2qUmesThxMWybm+Vfk+u1cOi6b7xd17rB7+5/B9AG\nYL+94SMJIe4q9As/IRJFwS9Eoij4hUgUBb8QiaLgFyJR2tuuyxrIs7CskTuX2Go+Hxxfci7ZNTBE\nbdU+3u5qjCtiGB4Lix7FKpd4zl86SW2vvnaY2gYGuf/3HeD+95Iakh96ZJTOKXRwWbGrq4faXjn8\nFrUtXA+vVbmbZ6p1R9axMsQLZw6M8DTH0R3dwfF//PGP0jn37nqI2i6P82tuYSGcQQgApUj7tcVa\nOFu01uAZes2c+OEbv5/rzi9Eoij4hUgUBb8QiaLgFyJRFPxCJIqCX4hEabvUZyVWWJNnIzUQllAa\n4PpJDp4hVu2qUNvAMJcc+/rDy1Wpct+np3kBz7dPHKe23ffspbZtQ/x1D42Gpa3d+/jr6ugeo7ae\nLl6gqVzhPQ8X5sOyXWcXl+VW6lzaskgpiJEdkSzN3SPB8Q8c4IVEx4b48zV5AiH6Brmxqy8s5wFA\nfS5sK0RuzZ5vPHuPoTu/EImi4BciURT8QiSKgl+IRFHwC5Eobd3tL8BRtXBdsst13nqrsy/8HpVH\nKohfvs5r54308N3twZFBanvwQ+EWT+dO0yn4xf8+R21z13jSz8jYq9TWvY1vfR/sfzA43j/YS+f0\nDFAT9t3H16PazRNgrs2FVZ2sxHfEC8WwUgEAbjzRaVt/uAUcAGwf3hGe0xtWAQCgHLklXpx8m9re\nfoefs7klngRV7gyrHFmZJzo183AcOe5suy4hxG8gCn4hEkXBL0SiKPiFSBQFvxCJouAXIlHWlfrM\nbDeAPwMwCiAHcMjdv2lmXwHwBwBu9FH6krv/LPZcjhw1LAZtsTyFIlG2LNqaiLeZiiURVSo8aWZw\nOCwpje7kdel6+ngrr6mJcG1CADh16hS19Q7wxKTtY2Ef+wb30zmdnfz5ymM8yaVnINKVPQv7Ue3i\n5yXLuAxYj2TUFCJZP5VCWKp08NqEszP8WGcvHqW2E2f/D7VdmuF68MhIWHYsR9qQdfWGQ7dQuIPt\nugA0APyxu79iZj0AXjazn7ds33D3/7zhowkh7ho20qtvAsBE6+/rZnYcwM7NdkwIsbm8p+/8ZrYX\nwEcAvNQa+oKZHTWzZ82MFI0WQtyNbDj4zawbwI8AfNHd5wB8C8B+AI9i9ZPB18i8p83ssJkdnuZd\nloUQbWZDwW9mJawG/nfd/ccA4O6T7t509xzAtwE8Fprr7ofc/aC7HxzkvSaEEG1m3eA3MwPwHQDH\n3f3rN43fnB3zaQDH7rx7QojNYiO7/Y8D+ByA18zsSGvsSwA+a2aPAnAAZwD84XpPlANYJhJcqchd\nKVpX+Pnq4XEAQKT9Vx289lyWZdQ2PByWjR54gNele+cUz1acm+Pyz/jEOLWVXuNyzvbRcIreyBjP\nihsd4x/JqjxhDtVObmwinHXWBJc+Gzmvc+eRNlT1Ol+PWoP4UV+ic8bP8++nE5f4eVlYmqS27r4G\ntY3uCl8/Xb1h3wGgUApfV2b82l7LRnb7/w5hYTyq6Qsh7m70Cz8hEkXBL0SiKPiFSBQFvxCJouAX\nIlHaWsDTHWjUwlJaMeOyXVbaFhxvgM/JG/x9bWGZZ+FVClyaq3aF/dh3H/9l84ce5mkQM7PT1PbO\nO1eo7ey5d6jtH14J+9jfz+W8++7jRR8P3M/9L5e5LFpEuGBoHqkvmde51Afnx2qu8Mt4gZzO82cv\n0DmnT3E579zZCWqr13jGYkxOvXd/uMho3wBfrKyDSKaFjUt9uvMLkSgKfiESRcEvRKIo+IVIFAW/\nEImi4BciUdou9dVWwvJFscqz8JibhQJ/7/JIdtNyLdxHDgAaxmWejlLYj4FRnjF3/0M8429qhheR\nnL7Gpajz53jW2ZEjJMOtwDPwzp+/Sm2nTvJeg3v27KW2sbFwUcpSiTcG9IgM2GhwGW16mvs/cTEs\nmZ54m/dyPP4G76H4xtFL1LZS5731Bgd5z8PtI+E16Rvg2Yo9/WFZNMtihWvfje78QiSKgl+IRFHw\nC5EoCn4hEkXBL0SiKPiFSJS2Sn1wICdKRCPn0lyzGe7v503+3pUVucRWW+GZWbUmz/grdISlnM6+\nsH8AcM8HuVwzc537eGma98ibvc4LO87OhYtIvnaUF1e+MsX9v7BnD7VdHOfa3K4d4f5/lXIfnROT\nbpvOZbSZq9eobXIqLIu+fPgtOufMO1zOm5nmknT/wG5qGx29n9p27NobHK/28GvHOoi8qaw+IcR6\nKPiFSBQFvxCJouAXIlEU/EIkyrq7/WZWAfAigI7W4//C3b9sZvsAfB/AAIBXAHzO3WvR5yoYOqrh\nHe5IlywsLc4Hx/PI4SplvhNdj7R+qtWnqK3o4V3xEnjdv/7hcIILANz3Yb7bP3NtO7XF2lOdeD28\nJjPTPJlpdobvEJ8/w3fSj3VzW6UY3jFvrHTTOc0mP2eljkgrrwKvhbhSD++KT03x8zx3jaspPdV9\n1PaB/Qeo7ZGHHqC2+/aH16Szm6tSubHzyduCrWUjd/4VAL/l7o9gtR33E2b2MQB/AuAb7n4AwFUA\nn9/wUYUQW866we+r3Lj1llr/OYDfAvAXrfHnAHxqUzwUQmwKG/rOb2ZZq0PvFICfAzgFYNbdb3zG\nGAfAazwLIe46NhT87t5090cB7ALwGIDQF5jgFzYze9rMDpvZ4Rleil4I0Wbe026/u88C+FsAHwOw\nzcxubBjuAnCRzDnk7gfd/eAAL3gjhGgz6wa/mQ2b2bbW31UA/wzAcQB/A+Bfth72FICfbpaTQog7\nz0YSe8YAPGdmGVbfLH7o7n9pZm8A+L6Z/UcA/wDgO+s9UcEK6C5Xg7YcXL6az8MyT73Bkz3KZf7S\n6jmXQ5Zq3FYi7Zhy4zJUf5m/rqFRXtft3gO81t21mUjSz0xY2pq8xGW56SleL7C3MyJHFsPnEgB8\nJTxv6XpYtgXiUl9H5xK1VXr4ayuU5oLjKytczmvUePJOV6Tt2dAAlwG3D+2ltoGB8D24Uo18Ty6G\nr0Xjl9uvP8V6D3D3owA+Ehg/jdXv/0KI9yH6hZ8QiaLgFyJRFPxCJIqCX4hEUfALkSjmsR5Jd/pg\nZpcB3OiTNATgbvjNn/x4N/Lj3bzf/LjH3bkeeRNtDf53HdjssLsf3JKDyw/5IT/0sV+IVFHwC5Eo\nWxn8h7bw2DcjP96N/Hg3v7F+bNl3fiHE1qKP/UIkypYEv5k9YWZvmdlJM3tmK3xo+XHGzF4zsyNm\ndriNx33WzKbM7NhNYwNm9nMzO9H6t3+L/PiKmV1orckRM/tkG/zYbWZ/Y2bHzex1M/vXrfG2rknE\nj7auiZlVzOyXZvZqy49/3xrfZ2YvtdbjB2bGUy43gru39T8AGVbLgN0LoAzgVQAPttuPli9nAAxt\nwXE/DuCjAI7dNPafADzT+vsZAH+yRX58BcC/afN6jAH4aOvvHgBvA3iw3WsS8aOtawLAAHS3/i4B\neAmrBXR+COAzrfH/BuBf3c5xtuLO/xiAk+5+2ldLfX8fwJNb4MeW4e4vAlhbe/lJrBZCBdpUEJX4\n0XbcfcLdX2n9fR2rxWJ2os1rEvGjrfgqm140dyuCfyeA8zf9/1YW/3QAf21mL5vZ01vkww1G3H0C\nWL0IAfDC/ZvPF8zsaOtrwaZ//bgZM9uL1foRL2EL12SNH0Cb16QdRXO3IvhDtUa2SnJ43N0/CuBf\nAPgjM/v4FvlxN/EtAPux2qNhAsDX2nVgM+sG8CMAX3T3cAmerfGj7Wvit1E0d6NsRfCPA7i5kTkt\n/rnZuPvF1r9TAH6Cra1MNGlmYwDQ+pe3lNlE3H2ydeHlAL6NNq2JmZWwGnDfdfcft4bbviYhP7Zq\nTVrHfs9FczfKVgT/rwAcaO1clgF8BsDz7XbCzLrMrOfG3wB+B8Cx+KxN5XmsFkIFtrAg6o1ga/Fp\ntGFNzMywWgPyuLt//SZTW9eE+dHuNWlb0dx27WCu2c38JFZ3Uk8B+Ldb5MO9WFUaXgXwejv9APA9\nrH58rGP1k9DnAQwCeAHAida/A1vkx/8A8BqAo1gNvrE2+PFPsPoR9iiAI63/PtnuNYn40dY1AfAw\nVoviHsXqG82/u+ma/SWAkwD+HEDH7RxHv/ATIlH0Cz8hEkXBL0SiKPiFSBQFvxCJouAXIlEU/EIk\nioJfiERR8AuRKP8XLJXPd/qt5yMAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5bc341ffc3532098bda9e415c1f5250fb503dcac",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "import torch\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import transforms, utils\n",
      "execution_count": 7,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9c3f9f7c7f1ead33a7b4c83ba5cd9e4358e2bf56",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "class TrainLoad(Dataset):\n    def __init__(self,excel_file,root_dir,transform=None):\n        self.df=pd.read_excel(excel_file)\n        self.labels_frame=self.df.iloc[0:982,0:3]\n        self.root_dir= root_dir\n        self.transform=transform\n    def __len__(self):\n        return len(self.labels_frame)\n    def __getitem__(self,idx):\n        img_name_int=os.path.join(self.root_dir,self.labels_frame.iloc[idx,0])\n        img_name=img_name_int+'.jpg'\n        image=io.imread(img_name)\n        label= self.labels_frame.iloc[idx,1]\n        image = image.transpose((2, 0, 1))\n        image = torch.from_numpy(image)\n        image = image.type(torch.FloatTensor)\n        sample={'image':image, 'label': label}\n        \n        if self.transform:\n            sample=self.transform(sample)\n        return sample",
      "execution_count": 22,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "b8c4428c33967a5170a3b34ed66a25a49d7a823e"
      },
      "cell_type": "code",
      "source": "class TestLoad(Dataset):\n    def __init__(self,excel_file,root_dir,transform=None):\n        self.df=pd.read_excel(excel_file)\n        self.labels_frame=self.df.iloc[983:,0:3]\n        self.root_dir= root_dir\n        self.transform=transform\n    def __len__(self):\n        return len(self.labels_frame)\n    def __getitem__(self,idx):\n        img_name_int=os.path.join(self.root_dir,self.labels_frame.iloc[idx,0])\n        img_name=img_name_int+'.jpg'\n        image=io.imread(img_name)\n        label= self.labels_frame.iloc[idx,1]\n        image = image.transpose((2, 0, 1))\n        image = torch.from_numpy(image)\n        image = image.type(torch.FloatTensor)\n        sample={'image':image, 'label': label}\n        \n        if self.transform:\n            sample=self.transform(sample)\n        return sample",
      "execution_count": 23,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6ca0ee8bc99f4d15f3dfa7de568f05c4dc2eb8f3",
        "scrolled": true,
        "collapsed": true
      },
      "cell_type": "code",
      "source": "Test_Dataset= TestLoad(excel_file='BDRW_train_2/labels.xls', \n                            root_dir='BDRW_train_2/')\nTrain_Dataset=TrainLoad(excel_file='BDRW_train_2/labels.xls',root_dir='BDRW_train_1/')",
      "execution_count": 24,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "scrolled": false,
        "_uuid": "89e73a9e3664608471b4b29f60a42312d6b322e7"
      },
      "cell_type": "code",
      "source": "trainloader=DataLoader(Train_Dataset,batch_size=4,shuffle=True,drop_last=True)\ntestloader=DataLoader(Test_Dataset,batch_size=4,shuffle=True,drop_last=True)\nprint(len(trainloader))\nprint(len(testloader))",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": "245\n102\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "0258ac8a3d3ea79b426d88b0903c09a34fe6084e"
      },
      "cell_type": "markdown",
      "source": "# Defining LeNet Architecture"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "1b601fedd9a3bac1b07a28ad4da88772dfb313cf"
      },
      "cell_type": "code",
      "source": "import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net,self).__init__()\n        self.conv1=nn.Conv2d(3,6,kernel_size = 5)           # 28*28*6\n        self.pool=nn.MaxPool2d(kernel_size = 2,stride = 2)  # 14*14*6\n        self.conv2=nn.Conv2d(6,16,kernel_size = 5)          # 10*10*16\n        self.fc1=nn.Linear(16*5*5,120)                      # 5*5*16\n        self.fc2=nn.Linear(120,84)\n        self.fc3=nn.Linear(84,10)\n        \n    def forward(self,x):\n        x=self.pool(F.relu(self.conv1(x)))\n        x=self.pool(F.relu(self.conv2(x)))\n        x=x.view(-1,16*5*5)\n        x=F.relu(self.fc1(x))\n        x=F.relu(self.fc2(x))\n        x=self.fc3(x)\n        return x\n    \nnet=Net()\n        \nprint(net)        ",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Net(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=120, bias=True)\n  (fc2): Linear(in_features=120, out_features=84, bias=True)\n  (fc3): Linear(in_features=84, out_features=10, bias=True)\n)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "4818f7c3715722166ceec840fe6d358632230bc9"
      },
      "cell_type": "markdown",
      "source": "# Defining the Loss criterion"
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "f46668c0bf8f2968637d26b1fc4400cee6d330ef"
      },
      "cell_type": "code",
      "source": "import torch.optim as optim\n\ncriterion=nn.CrossEntropyLoss()\noptimiser=optim.Adam(net.parameters(), lr=1e-4)",
      "execution_count": 27,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "dcb7b9155d508256c881879bd9635f43e70a6fc6"
      },
      "cell_type": "markdown",
      "source": "# Training the Network"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ef7bfdc9e3c6999007631552f36e7135376b5954"
      },
      "cell_type": "code",
      "source": "from torch.autograd import Variable\nimport time\niterations = 30\ntrainLoss = []\ntestAcc = []\nstart = time.time()\nfor epoch in range(iterations):\n    epochStart = time.time()\n    runningLoss = 0    \n    net.train(True) # For training\n    for data in trainloader:\n        inputs,labels = data['image'], data['label']\n        # Wrap them in Variable\n        inputs, labels = Variable(inputs), Variable(labels)  \n       \n        # Initialize gradients to zero\n        optimiser.zero_grad()\n        # Feed-forward input data through the network        \n        outputs = net(inputs)        \n        # Compute loss/error\n        loss = criterion(outputs, labels)\n        # Backpropagate loss and compute gradients\n        loss.backward()\n        # Update the network parameters\n        optimiser.step()\n        # Accumulate loss per batch\n        runningLoss += loss.data[0]    \n    avgTrainLoss = runningLoss/980.0\n    trainLoss.append(avgTrainLoss)\n    \n    # Evaluating performance on test set for each epoch\n    net.train(False) # For testing [Affects batch-norm and dropout layers (if any)]\n    running_correct = 0\n    for data in testloader:\n        inputs,labels = data['image'], data['label']\n        # Wrap them in Variable\n        inputs = Variable(inputs)\n        outputs = net(inputs)\n        _, predicted = torch.max(outputs.data, 1)\n        #print('The predicted tensor: {}'.format(predicted))\n        #print('The predicted label: {}'.format(labels))\n        running_correct += (predicted == labels).sum()\n        #print(running_correct)\n        #x=running_correct.data.numpy() \n    avgTestAcc = running_correct/408.0\n    #print(avgTestAcc)\n    testAcc.append(avgTestAcc)\n        \n    # Plotting training loss vs Epochs\n    fig1 = plt.figure(1)        \n    plt.plot(range(epoch+1),trainLoss,'r-',label='train')        \n    if epoch==0:\n        plt.legend(loc='upper left')\n        plt.xlabel('Epochs')\n        plt.ylabel('Training loss')   \n    # Plotting testing accuracy vs Epochs\n    fig2 = plt.figure(2)        \n    plt.plot(range(epoch+1),testAcc,'g-',label='test')        \n    if epoch==0:\n        plt.legend(loc='upper left')\n        plt.xlabel('Epochs')\n        plt.ylabel('Testing accuracy')    \n    epochEnd = time.time()-epochStart\n    print('Iteration: {:.0f} /{:.0f}  ;  Training Loss: {:.6f} ; Testing Acc: {:.3f} ; Time consumed: {:.0f}m {:.0f}s '\\\n          .format(epoch + 1,iterations,avgTrainLoss,avgTestAcc*100,epochEnd//60,epochEnd%60))\nend = time.time()-start\nprint('Training completed in {:.0f}m {:.0f}s'.format(end//60,end%60))\n",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Iteration: 1 /30  ;  Training Loss: 0.259125 ; Testing Acc: 66.667 ; Time consumed: 0m 1s \nIteration: 2 /30  ;  Training Loss: 0.188468 ; Testing Acc: 73.284 ; Time consumed: 0m 1s \nIteration: 3 /30  ;  Training Loss: 0.137586 ; Testing Acc: 77.206 ; Time consumed: 0m 1s \nIteration: 4 /30  ;  Training Loss: 0.105775 ; Testing Acc: 78.186 ; Time consumed: 0m 1s \nIteration: 5 /30  ;  Training Loss: 0.083241 ; Testing Acc: 79.657 ; Time consumed: 0m 1s \nIteration: 6 /30  ;  Training Loss: 0.064211 ; Testing Acc: 81.618 ; Time consumed: 0m 1s \nIteration: 7 /30  ;  Training Loss: 0.053249 ; Testing Acc: 83.333 ; Time consumed: 0m 1s \nIteration: 8 /30  ;  Training Loss: 0.045046 ; Testing Acc: 81.863 ; Time consumed: 0m 1s \nIteration: 9 /30  ;  Training Loss: 0.035414 ; Testing Acc: 82.353 ; Time consumed: 0m 1s \nIteration: 10 /30  ;  Training Loss: 0.026024 ; Testing Acc: 83.824 ; Time consumed: 0m 1s \nIteration: 11 /30  ;  Training Loss: 0.021408 ; Testing Acc: 82.598 ; Time consumed: 0m 1s \nIteration: 12 /30  ;  Training Loss: 0.017976 ; Testing Acc: 84.314 ; Time consumed: 0m 1s \nIteration: 13 /30  ;  Training Loss: 0.013171 ; Testing Acc: 85.049 ; Time consumed: 0m 1s \nIteration: 14 /30  ;  Training Loss: 0.010903 ; Testing Acc: 86.275 ; Time consumed: 0m 1s \nIteration: 15 /30  ;  Training Loss: 0.007858 ; Testing Acc: 86.275 ; Time consumed: 0m 1s \nIteration: 16 /30  ;  Training Loss: 0.005997 ; Testing Acc: 85.294 ; Time consumed: 0m 1s \nIteration: 17 /30  ;  Training Loss: 0.006352 ; Testing Acc: 84.314 ; Time consumed: 0m 1s \nIteration: 18 /30  ;  Training Loss: 0.007046 ; Testing Acc: 84.069 ; Time consumed: 0m 1s \nIteration: 19 /30  ;  Training Loss: 0.004629 ; Testing Acc: 86.520 ; Time consumed: 0m 1s \nIteration: 20 /30  ;  Training Loss: 0.005139 ; Testing Acc: 82.108 ; Time consumed: 0m 1s \nIteration: 21 /30  ;  Training Loss: 0.024026 ; Testing Acc: 87.010 ; Time consumed: 0m 1s \nIteration: 22 /30  ;  Training Loss: 0.011291 ; Testing Acc: 84.069 ; Time consumed: 0m 1s \nIteration: 23 /30  ;  Training Loss: 0.006232 ; Testing Acc: 87.500 ; Time consumed: 0m 1s \nIteration: 24 /30  ;  Training Loss: 0.001584 ; Testing Acc: 87.500 ; Time consumed: 0m 1s \nIteration: 25 /30  ;  Training Loss: 0.001085 ; Testing Acc: 87.500 ; Time consumed: 0m 1s \nIteration: 26 /30  ;  Training Loss: 0.000816 ; Testing Acc: 87.010 ; Time consumed: 0m 1s \nIteration: 27 /30  ;  Training Loss: 0.000627 ; Testing Acc: 88.235 ; Time consumed: 0m 1s \nIteration: 28 /30  ;  Training Loss: 0.000509 ; Testing Acc: 87.745 ; Time consumed: 0m 1s \nIteration: 29 /30  ;  Training Loss: 0.000454 ; Testing Acc: 87.990 ; Time consumed: 0m 1s \nIteration: 30 /30  ;  Training Loss: 0.000345 ; Testing Acc: 88.235 ; Time consumed: 0m 1s \nTraining completed in 0m 38s\n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7fb40db90c18>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEKCAYAAADjDHn2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3XuUXGWd7vHvQ5N0ruQuYpqQcIxK\nQAjQBJYoh0HluhRUlHAOCnPQiMhSlzKaceaIoC4B8cYRRcDMwhsZFcUcBwTkdpzhlg6JkMBgQsyQ\nJlzCJcSYdEKS3/lj76aqm+qu3Zfdu6r6+axVq3bt2lX1211QT9797v2+igjMzMx6s0fRBZiZWe1z\nWJiZWVUOCzMzq8phYWZmVTkszMysKoeFmZlV5bAwM7OqHBZmZlaVw8LMzKras+gCBsvUqVNj5syZ\nRZdhZlZXli1b9nxETKu2XcOExcyZM2lrayu6DDOzuiLpv7Js58NQZmZWlcPCzMyqcliYmVlVDdNn\nUckrr7xCe3s7HR0dRZeSu1GjRtHS0sKIESOKLsXMGlBDh0V7ezvjx49n5syZSCq6nNxEBC+88ALt\n7e3MmjWr6HLMrAE19GGojo4OpkyZ0tBBASCJKVOmDIsWlJkVo6HDAmj4oOg0XPbTzIrR0IehMnn4\nYdixI1lubS22FjOzGtXwLYuq9sj3T7Bp0ya+//3v9/l1J598Mps2bcqhIjOzvnNYHHRQrm/fU1js\n2rWr19fdfPPNTJw4Ma+yzMz6xIehcrZw4UKeeOIJ5s6dy4gRIxg3bhz77LMPK1as4NFHH+W0005j\n/fr1dHR08OlPf5oFCxYApeFLtmzZwkknncTb3/527r33XqZPn85vf/tbRo8eXfCemdlwMnzC4jOf\ngRUrKj/3178m9xKMG5f9PefOhe98p9dNLr30UlauXMmKFSu4++67OeWUU1i5cuWrp7guWrSIyZMn\ns23bNo444gg+8IEPMGXKlC7vsXr1am644QauvfZaPvShD3HjjTdy1llnZa/TzGyAcj0MJelESY9L\nWiNpYYXnPyvpUUkPS7pD0n5lz+2StCK9LcmzzldF5P4R8+bN63ItxJVXXskhhxzCUUcdxfr161m9\nevVrXjNr1izmzp0LwOGHH866detyr9PMrFxuLQtJTcBVwLuBdmCppCUR8WjZZsuB1ojYKukTwOXA\n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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7fb40c2de5f8>",
            "image/png": "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\nTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "9366e62c229c04e536d6871beadf339a20a5f99e"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.4",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}