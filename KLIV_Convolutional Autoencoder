#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 16 22:06:01 2018

@author: raj
"""

import pandas as pd
import numpy as np
from __future__ import print_function, division
import torch.nn as nn
import os
import torch
from skimage import io, transform
import matplotlib.pyplot as plt 
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms, utils
import torch.optim as optim
from torch.autograd import  Variable
import torch.nn.functional as F
# Ignoring warnings
import warnings
warnings.filterwarnings("ignore")
plt.ion() # To initiate interactive mode

import random
labels_frame= pd.read_excel('/home/raj/KLIV/BDRW_train/BDRW_train_1/train_labels.xls')
print(len(labels_frame))
n=random.randint(0,200)
img_name= labels_frame.iloc[n,0]
label= labels_frame.iloc[n,1]
print('Image Name : {}'.format(img_name))
print('Image Label :{}'.format(label))
def show_imlab (image, label):
    sample={'image':image, 'label': label}
    plt.imshow(image)
    print('The image shown below is: {}'.format(label))
plt.figure()
show_imlab(io.imread(os.path.join('BDRW_train_1/',img_name)),label)
plt.show()
class NumberLoad(Dataset):
    def __init__(self,excel_file,root_dir,transform=None):
        self.labels_frame=pd.read_excel(excel_file)
        self.root_dir= root_dir
        self.transform=transform
    def __len__(self):
        return len(self.labels_frame)
    def __getitem__(self,idx):
        img_name=os.path.join(self.root_dir,self.labels_frame.iloc[idx,0])
        image=io.imread(img_name)
        label= self.labels_frame.iloc[idx,1]
        image = image.transpose((2, 0, 1))
        image = torch.from_numpy(image)
        image = image.new_tensor(image, dtype = torch.float)
        sample={'image':image, 'label': label}
        
        if self.transform:
            sample=self.transform(sample)
        return sample
Test_Dataset= NumberLoad(excel_file='BDRW_test_2/test_labels.xls', 
                            root_dir='/home/raj/KLIV/BDRW_train/BDRW_test_2/')
Train_Dataset= NumberLoad(excel_file='BDRW_train_1/train_labels.xls', 
                            root_dir='/home/raj/KLIV/BDRW_train/BDRW_train_1/')

class AutoEncoder(nn.Module):
    
    def __init__(self, code_size):
        super(AutoEncoder,self).__init__()  # Super refers to the constructor of the parent class
        self.code_size = code_size
        
        # Encoder specification
        self.enc_cnn_1 = nn.Conv2d(3, 10, kernel_size=5, stride=1)
        self.enc_cnn_2 = nn.Conv2d(10, 20, kernel_size=5, stride=1)
        self.enc_linear_1 = nn.Linear(5*5* 20, 200)
        self.enc_linear_2 = nn.Linear(200, self.code_size)
        
        # Decoder specification
        self.dec_linear_1 = nn.Linear(self.code_size, 200)
        self.dec_linear_2 = nn.Linear(200, IMAGE_SIZE)
        
    def forward(self, images):
        code = self.encode(images)
        out = self.decode(code)
        return out, code
    
    def encode(self, images):
        code = self.enc_cnn_1(images)
        code = F.selu(F.max_pool2d(code, 2)) # 14*14*10
        
        code = self.enc_cnn_2(code)           # 10*10*20
        code = F.selu(F.max_pool2d(code, 2))  # 5*5*20
        
        code = code.view([images.size(0), -1]) # 50*10
        code = F.selu(self.enc_linear_1(code)) #500->200
        code = self.enc_linear_2(code)         # 200->50
        return code
    
    def decode(self, code):
        out = F.selu(self.dec_linear_1(code))     #50->200
        out = F.sigmoid(self.dec_linear_2(out))   # 200->32*32*3
        out = out.view([code.size(0), 3, IMAGE_WIDTH, IMAGE_HEIGHT])
        return out
    
net= AutoEncoder(code_size)
print(net)
autoencoder = AutoEncoder(code_size)
loss_fn = nn.BCELoss()
optimizer = optim.Adam(autoencoder.parameters(), lr=0.003)
num_epochs=5
for epoch in range(num_epochs):
    print("Epoch %d" % epoch)
    
    for i, data in enumerate(Train_Dataset):    # Ignore image labels
        inputs,_ = data['image'],data['label']
        #inputs,label=autoencoder(Variable(data['image']))
        inputs=inputs.view((1,3,32,32))
        print(label)
        #print(inputs.type())
        inputs=autoencoder(Variable(inputs))               
        optimizer.zero_grad()
        #optimizer.zero_grad()
        #print(inputs)
        loss=loss_fn(inputs,_)
        loss.backward()
        optimizer.step()
    
    print("Loss =%.3f" % loss.data[0])